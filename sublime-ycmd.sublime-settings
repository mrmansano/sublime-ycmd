{
  // -----
  // core settings

  // ycmd root directory
  // e.g. ~/.vim/bundle/YouCompleteMe/third_party/ycmd
  //      /usr/local/lib/ycmd
  "ycmd_root_directory": "",

  // ycmd default settings path
  // if not set, it will be calculated using ycmd_path
  "ycmd_default_settings_path": "",

  // ycmd python binary path
  // this must be the same python binary that was used when building ycmd
  // if not set, the one in the system PATH will be used
  "ycmd_python_binary_path": "",

  // ycmd/plugin language whitelist
  // if set, the plugin will only activate for these languages (based on the
  // scope, see Tools -> Developer -> Show Scope Name)
  // if not set (or if empty), the plugin will activate for all files
  // in either case, the language blacklist will override these selections
  "ycmd_language_whitelist": [
    "source.c",
    "source.c++",

    // enable more languages by adding more scopes:
    // "source.js",
    // "source.python",
  ],

  // ycmd/plugin language blacklist
  // the plugin will ignore completion requests for these languages (based on
  // the scope, see Tools -> Developer -> Show Scope Name)
  // entries in the blacklist have higher priority than those in the whitelist
  "ycmd_language_blacklist": [],

  // -----
  // plugin settings

  // logging configuration
  //
  // the log level should be one of:
  //    null, "debug", "info", "warning", "error", or "critical"
  //    null    - silence all log output
  //    "level" - include log output for severity "level" and higher
  //
  // the log file should be null or a string:
  //    null    - write log output to the console
  //    "path"  - append log output to the file at "path"
  "sublime_ycmd_log_level": null,
  "sublime_ycmd_log_file": null,

  // number of background threads to use for processing events
  // use 0 to have the plugin automatically decide based on the number of cpu
  // cores on the machine (cpu count * 5)
  // must be at least 1, but having more should smooth out slower operations
  "sublime_ycmd_background_threads": 0,

  // -----
  // ycmd settings

  // ycmd/plugin language mapping - not yet implemented
  // the plugin will use the active scope to determine the filetype/language
  // unfortunately, the syntax file may not refer to the language by the same
  // name that ycmd refers to the language (ycmd uses vim-based filetypes)
  // this mapping is used to translate the filetype extracted from the syntax
  // file to the filetype expected by ycmd
  // if semantic completion does not work, but identifiers are extracted and
  // returned in the completions, it's likely due to this mismatch
  // entries can be added to this mapping to help ensure that the filetype is
  // converted to a form that ycmd expects it in
  "ycmd_language_filetype": {
    "c++": "cpp",
    "js": "javascript",
  },

  // ycmd logging configurations
  // generally only useful for debugging issues in ycmd itself (e.g. missing a
  // semantic completer, or shutting down unexpectedly)
  //
  // the log level should be one of:
  //    null, "debug", "info", "warning", "error", or "critical"
  //
  // the log file can be specified as:
  //    null    - no log files kept, but process output is spooled
  //    false   - no log files kept, stdout and stderr explicitly closed
  //    true    - temporary files used for stdout and stderr
  // not yet supported:
  //    "path"  - file at "path" appended to with stdout and stderr
  // the following template variables are also not yet supported:
  //    %(tempdir)s   - temporary file directory  (e.g. "/tmp")
  //    %(projdir)s   - path to project directory (e.g. "/home/user/project")
  //    %(projname)s  - project directory name    (e.g. "project")
  //
  // the log files created by ycmd may also be retained after the server exits
  // by default, ycmd will delete the log files when it exits
  // this setting has no effect if the log file parameter is null or false
  "ycmd_log_level": null,
  "ycmd_log_file": null,
  "ycmd_keep_logs": false,

  // ycmd semantic completer configuration
  // can be enabled globally (in the user settings), per-project (in the
  // project file), or per-syntax (in the syntax-specific settings)
  // the semantic completers are generally slower, so ycmd will automatically
  // avoid using it for things like variable names
  // if the semantic completer is fast enough, this can be enabled to force
  // ycmd to use the semantic completer for all completion requests
  "ycmd_force_semantic_completion": false,
}
